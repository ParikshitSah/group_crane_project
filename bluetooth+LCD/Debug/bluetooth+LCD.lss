
bluetooth+LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800298  00800298  00000640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001509  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef4  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000762  00000000  00000000  00002b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000710  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049e  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004096  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	69 c1       	rjmp	.+722    	; 0x330 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	02 c2       	rjmp	.+1028   	; 0x46a <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	e6 c0       	rjmp	.+460    	; 0x242 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e1       	ldi	r30, 0x14	; 20
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 39       	cpi	r26, 0x98	; 152
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e9       	ldi	r26, 0x98	; 152
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 3c       	cpi	r26, 0xC6	; 198
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	62 d1       	rcall	.+708    	; 0x3e4 <main>
 120:	f7 c1       	rjmp	.+1006   	; 0x510 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCD_write>:
}
/* End of LCD initialization */

void LCD_write (unsigned char RS, unsigned char data)
{
	if(RS==DATA_WR) PORTD = 0b00000001;	/* write data: E = 0 R/!W=0, (write)RS = 1 ,   */
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	11 f4       	brne	.+4      	; 0x12c <LCD_write+0x8>
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	01 c0       	rjmp	.+2      	; 0x12e <LCD_write+0xa>
	else			PORTD = 0b00000000;	/* Write instruction: RS = 0 E = 0, R/!W=0 (write) */
 12c:	1b b8       	out	0x0b, r1	; 11


	PORTD = PORTD | 0x04;	/* Take E HIGH (logic 1) */
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	84 60       	ori	r24, 0x04	; 4
 132:	8b b9       	out	0x0b, r24	; 11
	PORTL = data;
 134:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	87 ec       	ldi	r24, 0xC7	; 199
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_write+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_write+0x1e>
 142:	00 00       	nop
	_delay_us(50);			/* needs to be at least 30uS or no display - use 50 */
	PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	81 70       	andi	r24, 0x01	; 1
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	87 ec       	ldi	r24, 0xC7	; 199
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_write+0x2a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_write+0x30>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <Init_LCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f e7       	ldi	r18, 0x7F	; 127
 15a:	85 eb       	ldi	r24, 0xB5	; 181
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <Init_LCD+0x6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <Init_LCD+0x10>
 168:	00 00       	nop

/* Perform LCD initialization */
void Init_LCD(void)
{
	_delay_ms(35);				/* wait for more than 30mS after VDD rises to 4.5V */
	LCD_write(INSTR_WR,0x38); 	/* function set 8bits, 2line, display off */
 16a:	68 e3       	ldi	r22, 0x38	; 56
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	da df       	rcall	.-76     	; 0x124 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	87 ec       	ldi	r24, 0xC7	; 199
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Init_LCD+0x1c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Init_LCD+0x22>
 17a:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x0C);	/* display on, cursor off, blink off */
 17c:	6c e0       	ldi	r22, 0x0C	; 12
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	d1 df       	rcall	.-94     	; 0x124 <LCD_write>
 182:	87 ec       	ldi	r24, 0xC7	; 199
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Init_LCD+0x2e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Init_LCD+0x34>
 18c:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x01);	/* display clear */
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	c8 df       	rcall	.-112    	; 0x124 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <Init_LCD+0x40>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <Init_LCD+0x46>
	_delay_ms(2);				/* wait for more than 1.53mS */
	LCD_write(INSTR_WR,0x06);	/* entry mode set, increment mode */
 19e:	00 00       	nop
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	bf cf       	rjmp	.-130    	; 0x124 <LCD_write>
 1a6:	08 95       	ret

000001a8 <Validate>:

void record_mode(void)
{
	
	
	Validate();
 1a8:	8b e5       	ldi	r24, 0x5B	; 91
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	52 d1       	rcall	.+676    	; 0x452 <String_out>
 1ae:	36 c0       	rjmp	.+108    	; 0x21c <Validate+0x74>
 1b0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <LCD_update>
 1b4:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <LCD_update+0x1>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	81 f5       	brne	.+96     	; 0x21c <Validate+0x74>
 1bc:	0f c0       	rjmp	.+30     	; 0x1dc <Validate+0x34>
 1be:	fc 01       	movw	r30, r24
 1c0:	e7 56       	subi	r30, 0x67	; 103
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	30 81       	ld	r19, Z
 1c6:	fc 01       	movw	r30, r24
 1c8:	ee 5b       	subi	r30, 0xBE	; 190
 1ca:	fd 4f       	sbci	r31, 0xFD	; 253
 1cc:	20 81       	ld	r18, Z
 1ce:	32 17       	cp	r19, r18
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <Validate+0x30>
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <access>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Validate+0x38>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	89 31       	cpi	r24, 0x19	; 25
 1e2:	91 05       	cpc	r25, r1
 1e4:	64 f3       	brlt	.-40     	; 0x1be <Validate+0x16>
 1e6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <access>
 1ea:	81 11       	cpse	r24, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <Validate+0x54>
 1ee:	89 e2       	ldi	r24, 0x29	; 41
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	2f d1       	rcall	.+606    	; 0x452 <String_out>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <edit_mode>
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <Validate+0x5e>
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	28 d1       	rcall	.+592    	; 0x452 <String_out>
 202:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <access>
 206:	89 e1       	ldi	r24, 0x19	; 25
 208:	e9 e9       	ldi	r30, 0x99	; 153
 20a:	f2 e0       	ldi	r31, 0x02	; 2
 20c:	df 01       	movw	r26, r30
 20e:	1d 92       	st	X+, r1
 210:	8a 95       	dec	r24
 212:	e9 f7       	brne	.-6      	; 0x20e <Validate+0x66>
 214:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <LCD_update+0x1>
 218:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <LCD_update>
 21c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <edit_mode>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	31 f6       	brne	.-116    	; 0x1b0 <Validate+0x8>
 224:	08 95       	ret

00000226 <init_ADC>:
}

void init_ADC(void)
{

	DDRF = 0x00;  // set PORTF as input
 226:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFE; // turn off pull-up resistor for LSB
 228:	8e ef       	ldi	r24, 0xFE	; 254
 22a:	81 bb       	out	0x11, r24	; 17

	ADMUX = (1 << REFS0);
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// ref voltage: AVCC, default channel: 0, left align
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADIE); // prescaler: 128
 232:	ea e7       	ldi	r30, 0x7A	; 122
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC);							   // enable conversion
 23a:	80 81       	ld	r24, Z
 23c:	80 6c       	ori	r24, 0xC0	; 192
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <__vector_29>:
}

ISR(ADC_vect) // interrupt for ADC
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	0b b6       	in	r0, 0x3b	; 59
 24e:	0f 92       	push	r0
 250:	2f 93       	push	r18
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	ADC_value = ADCL;				// sets ADC_value to ADCL
 25a:	e8 e7       	ldi	r30, 0x78	; 120
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <ADC_value+0x1>
 266:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <ADC_value>
	ADC_value = ADCL | (ADCH << 8); // adds last two bits
 26a:	20 81       	ld	r18, Z
 26c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	98 2f       	mov	r25, r24
 274:	88 27       	eor	r24, r24
 276:	82 2b       	or	r24, r18
 278:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <ADC_value+0x1>
 27c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <ADC_value>

	if (ADC_channel == 0)
 280:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ADC_channel>
 284:	81 11       	cpse	r24, r1
 286:	09 c0       	rjmp	.+18     	; 0x29a <__vector_29+0x58>
	{
		ADC_res0 = ADC_value;
 288:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <ADC_value>
 28c:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <ADC_value+0x1>
 290:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <ADC_res0+0x1>
 294:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <ADC_res0>
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <__vector_29+0x70>
	}
	else if (ADC_channel == 1)
 29a:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ADC_channel>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f4       	brne	.+16     	; 0x2b2 <__vector_29+0x70>
	{
		ADC_res1 = ADC_value;
 2a2:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <ADC_value>
 2a6:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <ADC_value+0x1>
 2aa:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <ADC_res1+0x1>
 2ae:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <ADC_res1>
	}

	ADC_channel++;
 2b2:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ADC_channel>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <ADC_channel>
	ADC_channel = ADC_channel % 2; // alternates ADC_channel
 2bc:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ADC_channel>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <ADC_channel>

	ADMUX = (ADMUX & 0xE0) | ADC_channel; // set ADC port
 2c6:	ec e7       	ldi	r30, 0x7C	; 124
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <ADC_channel>
 2d0:	80 7e       	andi	r24, 0xE0	; 224
 2d2:	89 2b       	or	r24, r25
 2d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	80 83       	st	Z, r24
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0b be       	out	0x3b, r0	; 59
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <Timer_Init>:

void Timer_Init(void)
{
	// FOR TIMER1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // NON Inverted PWM
 2f8:	e0 e8       	ldi	r30, 0x80	; 128
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	82 6a       	ori	r24, 0xA2	; 162
 300:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);	// PRESCALER=8 MODE 14(FAST PWM)
 302:	e1 e8       	ldi	r30, 0x81	; 129
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8a 61       	ori	r24, 0x1A	; 26
 30a:	80 83       	st	Z, r24
	ICR1 = 20000;											// freq=50Hz
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	9e e4       	ldi	r25, 0x4E	; 78
 310:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 314:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	DDRB |= (1 << PB5) | (1 << PB6);						// PWM Pins as Output
 318:	84 b1       	in	r24, 0x04	; 4
 31a:	80 66       	ori	r24, 0x60	; 96
 31c:	84 b9       	out	0x04, r24	; 4

	// TIMER0 for delay
	TCNT0 = 6; // 240
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
 322:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); // enable interrupts
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 32e:	08 95       	ret

00000330 <__vector_23>:

}
ISR(TIMER0_OVF_vect) // timer overflow for interrupt
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
	TCNT0 = 0; // 240
 33e:	16 bc       	out	0x26, r1	; 38
	tick++;
 340:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <tick>
 344:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <tick+0x1>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <tick+0x1>
 34e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <tick>
}
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <Init_IO>:

void Init_IO(void)
{
	DDRK = 0x00;	// Set PORTK to input switch
 360:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PORTK = Roller; // Set PORTK to roller switch
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>

	DDRA = 0x00;
 36a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x03; // set PORTA 0 & 1 pushbuttons
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	82 b9       	out	0x02, r24	; 2

	DDRC = 0x0F; // stepper motor output								change this back to 0x0F
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 374:	18 b8       	out	0x08, r1	; 8
 376:	08 95       	ret

00000378 <stepper_home>:
}

void stepper_home(void)
{
	OCR1A = 3800;
 378:	88 ed       	ldi	r24, 0xD8	; 216
 37a:	9e e0       	ldi	r25, 0x0E	; 14
 37c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 380:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 2400;
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	99 e0       	ldi	r25, 0x09	; 9
 388:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 38c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	while ((PINK & Roller) != 0)
 390:	19 c0       	rjmp	.+50     	; 0x3c4 <stepper_home+0x4c>
	{
		PORTC = half[stepper_index];
 392:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <__data_end>
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e0 50       	subi	r30, 0x00	; 0
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 81       	ld	r24, Z
 3a2:	88 b9       	out	0x08, r24	; 8
		while (tick < 10);
 3a4:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <tick>
 3a8:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <tick+0x1>
 3ac:	0a 97       	sbiw	r24, 0x0a	; 10
 3ae:	d0 f3       	brcs	.-12     	; 0x3a4 <stepper_home+0x2c>
		tick = 0;
 3b0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <tick+0x1>
 3b4:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <tick>
		++stepper_index;
 3b8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
		stepper_index = stepper_index % 8;
 3be:	87 70       	andi	r24, 0x07	; 7
 3c0:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
void stepper_home(void)
{
	OCR1A = 3800;
	OCR1B = 2400;

	while ((PINK & Roller) != 0)
 3c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3c8:	80 fd       	sbrc	r24, 0
 3ca:	e3 cf       	rjmp	.-58     	; 0x392 <stepper_home+0x1a>
		tick = 0;
		++stepper_index;
		stepper_index = stepper_index % 8;
		
	}
	String_out("Home position reached");
 3cc:	89 e7       	ldi	r24, 0x79	; 121
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	40 c0       	rjmp	.+128    	; 0x452 <String_out>
 3d2:	08 95       	ret

000003d4 <startup>:
	}
}

void startup(void)
{
	sei(); // enable interrupt
 3d4:	78 94       	sei
	Init_IO();
 3d6:	c4 df       	rcall	.-120    	; 0x360 <Init_IO>
	Timer_Init();
 3d8:	8f df       	rcall	.-226    	; 0x2f8 <Timer_Init>
	init_ADC();
 3da:	25 df       	rcall	.-438    	; 0x226 <init_ADC>
	stepper_home(); // return to home position (stepper)
 3dc:	cd df       	rcall	.-102    	; 0x378 <stepper_home>
 3de:	bc de       	rcall	.-648    	; 0x158 <Init_LCD>

	Init_LCD();
 3e0:	23 c0       	rjmp	.+70     	; 0x428 <Init_USART>
 3e2:	08 95       	ret

000003e4 <main>:
	Init_USART();
 3e4:	f7 df       	rcall	.-18     	; 0x3d4 <startup>
 3e6:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <LCD_update>
{
	startup();

	while (1) /* start of super loop */
	{
		if (LCD_update == 1) /// only chars
 3ea:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <LCD_update+0x1>
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	d1 f7       	brne	.-12     	; 0x3e6 <main+0x2>
		{
			switch (rx_buffer[0])
 3f2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <rx_buffer>
 3f6:	86 32       	cpi	r24, 0x26	; 38
 3f8:	41 f0       	breq	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	8f 33       	cpi	r24, 0x3F	; 63
 3fc:	41 f0       	breq	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fe:	83 32       	cpi	r24, 0x23	; 35
 400:	39 f4       	brne	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			{
				case '#':			//start button pressed
				String_out("Starting");
 402:	8f e8       	ldi	r24, 0x8F	; 143
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	25 d0       	rcall	.+74     	; 0x452 <String_out>
				break;
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				
				case '&':			//home button pressed
				stepper_home();
 40a:	b6 df       	rcall	.-148    	; 0x378 <stepper_home>
				break;
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				
				case '?':			//calibrate button pressed
				Validate();
 40e:	cc de       	rcall	.-616    	; 0x1a8 <Validate>
 410:	89 e1       	ldi	r24, 0x19	; 25
				
				break;
			}

			memset(rx_buffer, 0, 25); // clear the array
 412:	e9 e9       	ldi	r30, 0x99	; 153
 414:	f2 e0       	ldi	r31, 0x02	; 2
 416:	df 01       	movw	r26, r30
 418:	1d 92       	st	X+, r1
 41a:	8a 95       	dec	r24
 41c:	e9 f7       	brne	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41e:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <LCD_update+0x1>
			LCD_update = 0;
 422:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <LCD_update>
 426:	df cf       	rjmp	.-66     	; 0x3e6 <main+0x2>

00000428 <Init_USART>:


void Init_USART(void)
{
	uint16_t myubr;									//init variable
	UCSR0A = 0x00;									//clear register
 428:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);		//enable transmit, recieve and recieve interrupt
 42c:	88 e9       	ldi	r24, 0x98	; 152
 42e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C  = (1<<UCSZ00)|(1<<UCSZ01);				//no parity, async normal, 8 bit 
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	myubr = (F_CPU/(16UL*(uint16_t)9600))-1;		//calculate UBR value
	UBRR0L= myubr;									//assign UBR value
 438:	87 e6       	ldi	r24, 0x67	; 103
 43a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00;									//clear this register
 43e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 442:	08 95       	ret

00000444 <UART_out>:
	
}

void UART_out(uint8_t ch)						//Send data from USART
{
	while((UCSR0A & (1<<UDRE0))==0);			//Wait for data
 444:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 448:	95 ff       	sbrs	r25, 5
 44a:	fc cf       	rjmp	.-8      	; 0x444 <UART_out>
	UDR0 = ch;									//Assign value to variable
 44c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 450:	08 95       	ret

00000452 <String_out>:
}

void String_out(char *string)
{
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ec 01       	movw	r28, r24
	
	while(*string != '\0')
 458:	02 c0       	rjmp	.+4      	; 0x45e <String_out+0xc>
	{
		UART_out(*string);
 45a:	f4 df       	rcall	.-24     	; 0x444 <UART_out>
		string++;
 45c:	21 96       	adiw	r28, 0x01	; 1
}

void String_out(char *string)
{
	
	while(*string != '\0')
 45e:	88 81       	ld	r24, Y
 460:	81 11       	cpse	r24, r1
 462:	fb cf       	rjmp	.-10     	; 0x45a <String_out+0x8>
		UART_out(*string);
		string++;
	}
	
	
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <__vector_25>:

ISR(USART0_RX_vect)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	0b b6       	in	r0, 0x3b	; 59
 476:	0f 92       	push	r0
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31

		
	rx_char = UDR0;										//read UDR0
 490:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <rx_char+0x1>
 49a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <rx_char>
			
			
			
			if (rx_char == 0x0A)						//when 0A hex received
 49e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <rx_char>
 4a2:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <rx_char+0x1>
 4a6:	0a 97       	sbiw	r24, 0x0a	; 10
 4a8:	01 f1       	breq	.+64     	; 0x4ea <__vector_25+0x80>
			{
				return;									//end and return func
			}	
			
				if(rx_char != 0x0D)						//carriage return?
 4aa:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <rx_char>
 4ae:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <rx_char+0x1>
 4b2:	0d 97       	sbiw	r24, 0x0d	; 13
 4b4:	81 f0       	breq	.+32     	; 0x4d6 <__vector_25+0x6c>
				{
					rx_buffer[i] = rx_char;				//put recived char into buffer array
 4b6:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <i>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <rx_char>
 4c0:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <rx_char+0x1>
 4c4:	e7 56       	subi	r30, 0x67	; 103
 4c6:	fd 4f       	sbci	r31, 0xFD	; 253
 4c8:	80 83       	st	Z, r24
					i++	;								//increment index
 4ca:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <i>
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <i>
 4d4:	0a c0       	rjmp	.+20     	; 0x4ea <__vector_25+0x80>
				}
				else									//if carriage return
				{
					
					UART_out(0x0D);						//carriage return end of sentence
 4d6:	8d e0       	ldi	r24, 0x0D	; 13
 4d8:	b5 df       	rcall	.-150    	; 0x444 <UART_out>
					
					i=0;								// reset index
 4da:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <i>
					LCD_update = 1;						//update LCD
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <LCD_update+0x1>
 4e6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <LCD_update>
				}
				
				
				
			
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0b be       	out	0x3b, r0	; 59
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
