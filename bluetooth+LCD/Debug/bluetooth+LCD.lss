
bluetooth+LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800200  00000a10  00000aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  008002f4  008002f4  00000b98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a18  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001048  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b41  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000042c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b3  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c3  00000000  00000000  00004ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000053aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
   6:	00 00       	nop
   8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
   a:	00 00       	nop
   c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
   e:	00 00       	nop
  10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
  12:	00 00       	nop
  14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
  16:	00 00       	nop
  18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
  1e:	00 00       	nop
  20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
  22:	00 00       	nop
  24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
  26:	00 00       	nop
  28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
  36:	00 00       	nop
  38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
  3e:	00 00       	nop
  40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
  42:	00 00       	nop
  44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
  52:	00 00       	nop
  54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
  56:	00 00       	nop
  58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a3 c2       	rjmp	.+1350   	; 0x5a4 <__vector_23>
  5e:	00 00       	nop
  60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
  62:	00 00       	nop
  64:	69 c4       	rjmp	.+2258   	; 0x938 <__vector_25>
  66:	00 00       	nop
  68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c2       	rjmp	.+1088   	; 0x4b6 <__vector_29>
  76:	00 00       	nop
  78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
  7e:	00 00       	nop
  80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
  82:	00 00       	nop
  84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
  86:	00 00       	nop
  88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4f c0       	rjmp	.+158    	; 0x130 <__bad_interrupt>
  92:	00 00       	nop
  94:	4d c0       	rjmp	.+154    	; 0x130 <__bad_interrupt>
  96:	00 00       	nop
  98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	49 c0       	rjmp	.+146    	; 0x130 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	43 c0       	rjmp	.+134    	; 0x130 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
  be:	00 00       	nop
  c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	31 c0       	rjmp	.+98     	; 0x130 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	2f c0       	rjmp	.+94     	; 0x130 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2b c0       	rjmp	.+86     	; 0x130 <__bad_interrupt>
  da:	00 00       	nop
  dc:	29 c0       	rjmp	.+82     	; 0x130 <__bad_interrupt>
  de:	00 00       	nop
  e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	9f 01       	movw	r18, r30
  e6:	a8 01       	movw	r20, r16
  e8:	b1 01       	movw	r22, r2
  ea:	ba 01       	movw	r22, r20
  ec:	c3 01       	movw	r24, r6
  ee:	cc 01       	movw	r24, r24
  f0:	d5 01       	movw	r26, r10

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_copy_data>:
 102:	12 e0       	ldi	r17, 0x02	; 2
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	e0 e1       	ldi	r30, 0x10	; 16
 10a:	fa e0       	ldi	r31, 0x0A	; 10
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	0b bf       	out	0x3b, r16	; 59
 110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
 112:	07 90       	elpm	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	a4 3f       	cpi	r26, 0xF4	; 244
 118:	b1 07       	cpc	r27, r17
 11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
 11c:	23 e0       	ldi	r18, 0x03	; 3
 11e:	a4 ef       	ldi	r26, 0xF4	; 244
 120:	b2 e0       	ldi	r27, 0x02	; 2
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	a1 33       	cpi	r26, 0x31	; 49
 128:	b2 07       	cpc	r27, r18
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	e0 d2       	rcall	.+1472   	; 0x6ee <main>
 12e:	6e c4       	rjmp	.+2268   	; 0xa0c <_exit>

00000130 <__bad_interrupt>:
 130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <LCD_write>:
}
/* End of LCD initialization */

void LCD_write (unsigned char RS, unsigned char data)
{
	if(RS==DATA_WR) PORTD = 0b00000001;	/* write data: E = 0 R/!W=0, (write)RS = 1 ,   */
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	11 f4       	brne	.+4      	; 0x13a <LCD_write+0x8>
 136:	8b b9       	out	0x0b, r24	; 11
 138:	01 c0       	rjmp	.+2      	; 0x13c <LCD_write+0xa>
	else			PORTD = 0b00000000;	/* Write instruction: RS = 0 E = 0, R/!W=0 (write) */
 13a:	1b b8       	out	0x0b, r1	; 11


	PORTD = PORTD | 0x04;	/* Take E HIGH (logic 1) */
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	8b b9       	out	0x0b, r24	; 11
	PORTL = data;
 142:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	87 ec       	ldi	r24, 0xC7	; 199
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_write+0x18>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_write+0x1e>
 150:	00 00       	nop
	_delay_us(50);			/* needs to be at least 30uS or no display - use 50 */
	PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	81 70       	andi	r24, 0x01	; 1
 156:	8b b9       	out	0x0b, r24	; 11
 158:	87 ec       	ldi	r24, 0xC7	; 199
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_write+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_write+0x30>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <Init_LCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f e7       	ldi	r18, 0x7F	; 127
 168:	85 eb       	ldi	r24, 0xB5	; 181
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <Init_LCD+0x6>
 174:	00 c0       	rjmp	.+0      	; 0x176 <Init_LCD+0x10>
 176:	00 00       	nop

/* Perform LCD initialization */
void Init_LCD(void)
{
	_delay_ms(35);				/* wait for more than 30mS after VDD rises to 4.5V */
	LCD_write(INSTR_WR,0x38); 	/* function set 8bits, 2line, display off */
 178:	68 e3       	ldi	r22, 0x38	; 56
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	da df       	rcall	.-76     	; 0x132 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	87 ec       	ldi	r24, 0xC7	; 199
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <Init_LCD+0x1c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <Init_LCD+0x22>
 188:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x0C);	/* display on, cursor off, blink off */
 18a:	6c e0       	ldi	r22, 0x0C	; 12
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	d1 df       	rcall	.-94     	; 0x132 <LCD_write>
 190:	87 ec       	ldi	r24, 0xC7	; 199
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <Init_LCD+0x2e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Init_LCD+0x34>
 19a:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x01);	/* display clear */
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	c8 df       	rcall	.-112    	; 0x132 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Init_LCD+0x40>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Init_LCD+0x46>
	_delay_ms(2);				/* wait for more than 1.53mS */
	LCD_write(INSTR_WR,0x06);	/* entry mode set, increment mode */
 1ac:	00 00       	nop
 1ae:	66 e0       	ldi	r22, 0x06	; 6
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	bf cf       	rjmp	.-130    	; 0x132 <LCD_write>
 1b4:	08 95       	ret

000001b6 <manual_ctrl>:
	}
}

void manual_ctrl(void)
{
	if (ADC_channel == 0) // when channel one is selected, plunger
 1b6:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 1ba:	81 11       	cpse	r24, r1
 1bc:	30 c0       	rjmp	.+96     	; 0x21e <manual_ctrl+0x68>
	{

		OCR1A = ((uint32_t)ADC_res0 * 25 / 16) + 2200; // assign value to servo 1
 1be:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <ADC_res0>
 1c2:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <ADC_res0+0x1>
 1c6:	a0 e0       	ldi	r26, 0x00	; 0
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	ac 01       	movw	r20, r24
 1cc:	bd 01       	movw	r22, r26
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	66 1f       	adc	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	84 0f       	add	r24, r20
 1e0:	95 1f       	adc	r25, r21
 1e2:	a6 1f       	adc	r26, r22
 1e4:	b7 1f       	adc	r27, r23
 1e6:	ac 01       	movw	r20, r24
 1e8:	bd 01       	movw	r22, r26
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	66 1f       	adc	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	66 1f       	adc	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	84 0f       	add	r24, r20
 1fc:	95 1f       	adc	r25, r21
 1fe:	a6 1f       	adc	r26, r22
 200:	b7 1f       	adc	r27, r23
 202:	68 94       	set
 204:	13 f8       	bld	r1, 3
 206:	b6 95       	lsr	r27
 208:	a7 95       	ror	r26
 20a:	97 95       	ror	r25
 20c:	87 95       	ror	r24
 20e:	16 94       	lsr	r1
 210:	d1 f7       	brne	.-12     	; 0x206 <manual_ctrl+0x50>
 212:	88 56       	subi	r24, 0x68	; 104
 214:	97 4f       	sbci	r25, 0xF7	; 247
 216:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 21a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	}
	if (ADC_channel == 1) // when channel 2 is selected, arm
 21e:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	c9 f4       	brne	.+50     	; 0x258 <manual_ctrl+0xa2>
	{
		OCR1B = ((uint32_t)ADC_res1 * 625 / 512) + 2400; // assign value to servo 2
 226:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <ADC_res1>
 22a:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <ADC_res1+0x1>
 22e:	a1 e7       	ldi	r26, 0x71	; 113
 230:	b2 e0       	ldi	r27, 0x02	; 2
 232:	dd d3       	rcall	.+1978   	; 0x9ee <__umulhisi3>
 234:	dc 01       	movw	r26, r24
 236:	cb 01       	movw	r24, r22
 238:	07 2e       	mov	r0, r23
 23a:	79 e0       	ldi	r23, 0x09	; 9
 23c:	b6 95       	lsr	r27
 23e:	a7 95       	ror	r26
 240:	97 95       	ror	r25
 242:	87 95       	ror	r24
 244:	7a 95       	dec	r23
 246:	d1 f7       	brne	.-12     	; 0x23c <manual_ctrl+0x86>
 248:	70 2d       	mov	r23, r0
 24a:	bc 01       	movw	r22, r24
 24c:	60 5a       	subi	r22, 0xA0	; 160
 24e:	76 4f       	sbci	r23, 0xF6	; 246
 250:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 254:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	}

	if ((PINA & 0x01) != 0) // pushbutton 1
 258:	00 99       	sbic	0x00, 0	; 0
 25a:	27 c0       	rjmp	.+78     	; 0x2aa <manual_ctrl+0xf4>
 25c:	28 c0       	rjmp	.+80     	; 0x2ae <manual_ctrl+0xf8>
	{
		while ((PINA & 0x01) != 0)
		{
			for(stepper_index = 0; stepper_index <8; stepper_index++)
 25e:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <stepper_index>
 262:	16 c0       	rjmp	.+44     	; 0x290 <manual_ctrl+0xda>
			{
				PORTC = half[stepper_index];
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	e0 50       	subi	r30, 0x00	; 0
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 81       	ld	r24, Z
 270:	88 b9       	out	0x08, r24	; 8

				while (tick < 10);
 272:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 276:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 27a:	0a 97       	sbiw	r24, 0x0a	; 10
 27c:	d0 f3       	brcs	.-12     	; 0x272 <manual_ctrl+0xbc>
				tick = 0;
 27e:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 282:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>

	if ((PINA & 0x01) != 0) // pushbutton 1
	{
		while ((PINA & 0x01) != 0)
		{
			for(stepper_index = 0; stepper_index <8; stepper_index++)
 286:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <stepper_index>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 290:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <stepper_index>
 294:	e8 30       	cpi	r30, 0x08	; 8
 296:	30 f3       	brcs	.-52     	; 0x264 <manual_ctrl+0xae>
			
			//++stepper_index;
			//stepper_index = stepper_index % 8;
			
			
				stepper_counts++;
 298:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stepper_counts>
 29c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <stepper_counts+0x1>
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <stepper_counts+0x1>
 2a6:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <stepper_counts>
		OCR1B = ((uint32_t)ADC_res1 * 625 / 512) + 2400; // assign value to servo 2
	}

	if ((PINA & 0x01) != 0) // pushbutton 1
	{
		while ((PINA & 0x01) != 0)
 2aa:	00 99       	sbic	0x00, 0	; 0
 2ac:	d8 cf       	rjmp	.-80     	; 0x25e <manual_ctrl+0xa8>
			
		}
	}
	

	if ((PINA & 0x02) != 0) // pushbutton 2
 2ae:	01 99       	sbic	0x00, 1	; 0
 2b0:	28 c0       	rjmp	.+80     	; 0x302 <manual_ctrl+0x14c>
 2b2:	29 c0       	rjmp	.+82     	; 0x306 <manual_ctrl+0x150>
	{
		while ((PINA & 0x02) != 0)
		{

			for(stepper_index = 7; stepper_index > 0; stepper_index--)
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <manual_ctrl+0x132>
			{
				PORTC = half[stepper_index];
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e0 50       	subi	r30, 0x00	; 0
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	88 b9       	out	0x08, r24	; 8

				while (tick < 10);
 2ca:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 2ce:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 2d2:	0a 97       	sbiw	r24, 0x0a	; 10
 2d4:	d0 f3       	brcs	.-12     	; 0x2ca <manual_ctrl+0x114>
				tick = 0;
 2d6:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 2da:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	if ((PINA & 0x02) != 0) // pushbutton 2
	{
		while ((PINA & 0x02) != 0)
		{

			for(stepper_index = 7; stepper_index > 0; stepper_index--)
 2de:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <stepper_index>
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 2e8:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <stepper_index>
 2ec:	e1 11       	cpse	r30, r1
 2ee:	e6 cf       	rjmp	.-52     	; 0x2bc <manual_ctrl+0x106>
// 
// 			while (tick < 10);
// 			tick = 0;
// 			--stepper_index;

			stepper_counts--;
 2f0:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stepper_counts>
 2f4:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <stepper_counts+0x1>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <stepper_counts+0x1>
 2fe:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <stepper_counts>
	}
	

	if ((PINA & 0x02) != 0) // pushbutton 2
	{
		while ((PINA & 0x02) != 0)
 302:	01 99       	sbic	0x00, 1	; 0
 304:	d7 cf       	rjmp	.-82     	; 0x2b4 <manual_ctrl+0xfe>


	

	//record
	if(LCD_update == 1 )
 306:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <LCD_update>
 30a:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <LCD_update+0x1>
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <manual_ctrl+0x15e>
 312:	7b c0       	rjmp	.+246    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{


		if(rx_buffer[0]== '!') 								// if record is pressed
 314:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx_buffer>
 318:	81 32       	cpi	r24, 0x21	; 33
 31a:	09 f0       	breq	.+2      	; 0x31e <manual_ctrl+0x168>
 31c:	6f c0       	rjmp	.+222    	; 0x3fc <manual_ctrl+0x246>
		{
			if(record_counter < 7)
 31e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
 322:	87 30       	cpi	r24, 0x07	; 7
 324:	08 f0       	brcs	.+2      	; 0x328 <manual_ctrl+0x172>
 326:	62 c0       	rjmp	.+196    	; 0x3ec <manual_ctrl+0x236>
			{
				switch(record_counter)						//assign motor value
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	87 30       	cpi	r24, 0x07	; 7
 32c:	91 05       	cpc	r25, r1
 32e:	08 f0       	brcs	.+2      	; 0x332 <manual_ctrl+0x17c>
 330:	44 c0       	rjmp	.+136    	; 0x3ba <manual_ctrl+0x204>
 332:	fc 01       	movw	r30, r24
 334:	88 27       	eor	r24, r24
 336:	ee 58       	subi	r30, 0x8E	; 142
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	8f 4f       	sbci	r24, 0xFF	; 255
 33c:	50 c3       	rjmp	.+1696   	; 0x9de <__tablejump2__>
				{
					case 0:
					currentMotor = stepper_counts;			//stepper motor
 33e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stepper_counts>
 342:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <stepper_counts+0x1>
 346:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 34a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 34e:	35 c0       	rjmp	.+106    	; 0x3ba <manual_ctrl+0x204>

					case 1:
					currentMotor = OCR1B;			//arm servo
 350:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 354:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 358:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 35c:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 360:	2c c0       	rjmp	.+88     	; 0x3ba <manual_ctrl+0x204>

					case 2:
					currentMotor = OCR1A;			//plunger servo
 362:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 366:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 36a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 36e:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 372:	23 c0       	rjmp	.+70     	; 0x3ba <manual_ctrl+0x204>

					case 3:
					currentMotor = OCR1B;			//arm servo
 374:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 378:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 37c:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 380:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 384:	1a c0       	rjmp	.+52     	; 0x3ba <manual_ctrl+0x204>

					case 4:
					currentMotor = stepper_counts;			//stepper motor
 386:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stepper_counts>
 38a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <stepper_counts+0x1>
 38e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 392:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 396:	11 c0       	rjmp	.+34     	; 0x3ba <manual_ctrl+0x204>

					case 5:
					currentMotor = OCR1B;			//arm servo
 398:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 39c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 3a0:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 3a4:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <manual_ctrl+0x204>

					case 6:
					currentMotor = OCR1A;			//plunger servo
 3aa:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 3ae:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 3b2:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <currentMotor+0x1>
 3b6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <currentMotor>
					break;
				}
				String_out("Before EEPROM ");
 3ba:	89 e6       	ldi	r24, 0x69	; 105
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	b0 d2       	rcall	.+1376   	; 0x920 <String_out>
				toEEPROM[record_counter] = currentMotor;
 3c0:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <__data_end>
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	ef 5e       	subi	r30, 0xEF	; 239
 3cc:	fc 4f       	sbci	r31, 0xFC	; 252
 3ce:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <currentMotor>
 3d2:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <currentMotor+0x1>
 3d6:	91 83       	std	Z+1, r25	; 0x01
				//Num_out(currentMotor);
				String_out("Recorded");
 3d8:	80 83       	st	Z, r24
 3da:	88 e7       	ldi	r24, 0x78	; 120
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	a0 d2       	rcall	.+1344   	; 0x920 <String_out>
				//String_out(currentMotor);
				record_counter++;
 3e0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end>
 3ea:	0b c0       	rjmp	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
			else
			{
				record_counter = 0;
 3ec:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <__data_end>
				String_out("Done Recording All Steps");
 3f0:	81 e8       	ldi	r24, 0x81	; 129
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	95 d2       	rcall	.+1322   	; 0x920 <String_out>
				//send to eeprom
				//EEPROM_write_string(Address_EEPROM, toEEPROM);
				//String_out("EEPROM DONE");
				//String_out(toEEPROM);
				
				edit_mode = 0;								//exit from the function
 3f6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <edit_mode>
			}

		}
		else
		{
			String_out("Press only the Record Button");
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	8a e9       	ldi	r24, 0x9A	; 154
 3fe:	92 e0       	ldi	r25, 0x02	; 2
 400:	8f d2       	rcall	.+1310   	; 0x920 <String_out>
		}

	
		LCD_update = 0;
 402:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <LCD_update+0x1>
 406:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <LCD_update>
 40a:	08 95       	ret

0000040c <Validate>:
	stepper_home(); // return to home position (stepper)
}

void Validate(void)
{
	String_out("Enter configuration password:");
 40c:	87 eb       	ldi	r24, 0xB7	; 183
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	87 d2       	rcall	.+1294   	; 0x920 <String_out>
	while (edit_mode != 1)
 412:	36 c0       	rjmp	.+108    	; 0x480 <Validate+0x74>
	{
		if (LCD_update == 1)
 414:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <LCD_update>
 418:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <LCD_update+0x1>
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	81 f5       	brne	.+96     	; 0x480 <Validate+0x74>
 420:	0f c0       	rjmp	.+30     	; 0x440 <Validate+0x34>
		{
			// check password attempt
			for (int i = 0; i < 25; i++)
			{
				if (rx_buffer[i] != password[i])
 422:	fc 01       	movw	r30, r24
 424:	ea 50       	subi	r30, 0x0A	; 10
 426:	fd 4f       	sbci	r31, 0xFD	; 253
 428:	30 81       	ld	r19, Z
 42a:	fc 01       	movw	r30, r24
 42c:	ee 5b       	subi	r30, 0xBE	; 190
 42e:	fd 4f       	sbci	r31, 0xFD	; 253
 430:	20 81       	ld	r18, Z
 432:	32 17       	cp	r19, r18
 434:	19 f0       	breq	.+6      	; 0x43c <Validate+0x30>
				{
					access = 1;
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <access>
	while (edit_mode != 1)
	{
		if (LCD_update == 1)
		{
			// check password attempt
			for (int i = 0; i < 25; i++)
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	02 c0       	rjmp	.+4      	; 0x444 <Validate+0x38>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	89 31       	cpi	r24, 0x19	; 25
 446:	91 05       	cpc	r25, r1
 448:	64 f3       	brlt	.-40     	; 0x422 <Validate+0x16>
				if (rx_buffer[i] != password[i])
				{
					access = 1;
				}
			}
			if (access == 0)
 44a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <access>
 44e:	81 11       	cpse	r24, r1
 450:	07 c0       	rjmp	.+14     	; 0x460 <Validate+0x54>
			{
				String_out(sucess);
 452:	89 e2       	ldi	r24, 0x29	; 41
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	64 d2       	rcall	.+1224   	; 0x920 <String_out>
				edit_mode = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <edit_mode>
 45e:	05 c0       	rjmp	.+10     	; 0x46a <Validate+0x5e>
			}
			else
			{
				String_out(fail);
 460:	80 e1       	ldi	r24, 0x10	; 16
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	5d d2       	rcall	.+1210   	; 0x920 <String_out>
				access = 0;
 466:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <access>
			}
			memset(rx_buffer, 0, 25); // clear the array
 46a:	89 e1       	ldi	r24, 0x19	; 25
 46c:	e6 ef       	ldi	r30, 0xF6	; 246
 46e:	f2 e0       	ldi	r31, 0x02	; 2
 470:	df 01       	movw	r26, r30
 472:	1d 92       	st	X+, r1
 474:	8a 95       	dec	r24
 476:	e9 f7       	brne	.-6      	; 0x472 <Validate+0x66>
			LCD_update = 0;
 478:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <LCD_update+0x1>
 47c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <LCD_update>
}

void Validate(void)
{
	String_out("Enter configuration password:");
	while (edit_mode != 1)
 480:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <edit_mode>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	31 f6       	brne	.-116    	; 0x414 <Validate+0x8>
			}
			memset(rx_buffer, 0, 25); // clear the array
			LCD_update = 0;
		}
	}
}
 488:	08 95       	ret

0000048a <record_mode>:

} /* end main */

void record_mode(void)
{
	Validate();
 48a:	c0 df       	rcall	.-128    	; 0x40c <Validate>
	while(edit_mode == 1)
	{
		manual_ctrl();
 48c:	01 c0       	rjmp	.+2      	; 0x490 <record_mode+0x6>
 48e:	93 de       	rcall	.-730    	; 0x1b6 <manual_ctrl>
} /* end main */

void record_mode(void)
{
	Validate();
	while(edit_mode == 1)
 490:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <edit_mode>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	d9 f3       	breq	.-10     	; 0x48e <record_mode+0x4>
	{
		manual_ctrl();
	}
}
 498:	08 95       	ret

0000049a <init_ADC>:
}

void init_ADC(void)
{

	DDRF = 0x00;  // set PORTF as input
 49a:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFE; // turn off pull-up resistor for LSB
 49c:	8e ef       	ldi	r24, 0xFE	; 254
 49e:	81 bb       	out	0x11, r24	; 17

	ADMUX = (1 << REFS0);
 4a0:	80 e4       	ldi	r24, 0x40	; 64
 4a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// ref voltage: AVCC, default channel: 0, left align
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADIE); // prescaler: 128
 4a6:	ea e7       	ldi	r30, 0x7A	; 122
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	8f e0       	ldi	r24, 0x0F	; 15
 4ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC);							   // enable conversion
 4ae:	80 81       	ld	r24, Z
 4b0:	80 6c       	ori	r24, 0xC0	; 192
 4b2:	80 83       	st	Z, r24
 4b4:	08 95       	ret

000004b6 <__vector_29>:
}

ISR(ADC_vect) // interrupt for ADC
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	0b b6       	in	r0, 0x3b	; 59
 4c2:	0f 92       	push	r0
 4c4:	2f 93       	push	r18
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	ADC_value = ADCL;				// sets ADC_value to ADCL
 4ce:	e8 e7       	ldi	r30, 0x78	; 120
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ADC_value+0x1>
 4da:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ADC_value>
	ADC_value = ADCL | (ADCH << 8); // adds last two bits
 4de:	20 81       	ld	r18, Z
 4e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	98 2f       	mov	r25, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	82 2b       	or	r24, r18
 4ec:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ADC_value+0x1>
 4f0:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ADC_value>

	if (ADC_channel == 0)
 4f4:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 4f8:	81 11       	cpse	r24, r1
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__vector_29+0x58>
	{
		ADC_res0 = ADC_value;
 4fc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ADC_value>
 500:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ADC_value+0x1>
 504:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <ADC_res0+0x1>
 508:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <ADC_res0>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <__vector_29+0x70>
	}
	else if (ADC_channel == 1)
 50e:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	41 f4       	brne	.+16     	; 0x526 <__vector_29+0x70>
	{
		ADC_res1 = ADC_value;
 516:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ADC_value>
 51a:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ADC_value+0x1>
 51e:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <ADC_res1+0x1>
 522:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <ADC_res1>
	}

	ADC_channel++;
 526:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <ADC_channel>
	ADC_channel = ADC_channel % 2; // alternates ADC_channel
 530:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <ADC_channel>
 534:	81 70       	andi	r24, 0x01	; 1
 536:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <ADC_channel>

	ADMUX = (ADMUX & 0xE0) | ADC_channel; // set ADC port
 53a:	ec e7       	ldi	r30, 0x7C	; 124
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <ADC_channel>
 544:	80 7e       	andi	r24, 0xE0	; 224
 546:	89 2b       	or	r24, r25
 548:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 54a:	ea e7       	ldi	r30, 0x7A	; 122
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 64       	ori	r24, 0x40	; 64
 552:	80 83       	st	Z, r24
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0b be       	out	0x3b, r0	; 59
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <Timer_Init>:

void Timer_Init(void)
{
	// FOR TIMER1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // NON Inverted PWM
 56c:	e0 e8       	ldi	r30, 0x80	; 128
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	82 6a       	ori	r24, 0xA2	; 162
 574:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);	// PRESCALER=8 MODE 14(FAST PWM)
 576:	e1 e8       	ldi	r30, 0x81	; 129
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8a 61       	ori	r24, 0x1A	; 26
 57e:	80 83       	st	Z, r24
	ICR1 = 20000;											// freq=50Hz
 580:	80 e2       	ldi	r24, 0x20	; 32
 582:	9e e4       	ldi	r25, 0x4E	; 78
 584:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 588:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	DDRB |= (1 << PB5) | (1 << PB6);						// PWM Pins as Output
 58c:	84 b1       	in	r24, 0x04	; 4
 58e:	80 66       	ori	r24, 0x60	; 96
 590:	84 b9       	out	0x04, r24	; 4

	// TIMER0 for delay
	TCNT0 = 6; // 240
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
 596:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); // enable interrupts
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 5a2:	08 95       	ret

000005a4 <__vector_23>:

}
ISR(TIMER0_OVF_vect) // timer overflow for interrupt
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
	TCNT0 = 0; // 240
 5b2:	16 bc       	out	0x26, r1	; 38
	tick++;
 5b4:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 5b8:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <tick+0x1>
 5c2:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <tick>
}
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <Init_IO>:

void Init_IO(void)
{
	DDRK = 0x00;	// Set PORTK to input switch
 5d4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PORTK = Roller; // Set PORTK to roller switch
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>

	DDRA = 0x00;
 5de:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x03; // set PORTA 0 & 1 pushbuttons
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	82 b9       	out	0x02, r24	; 2

	DDRC = 0x0F; // stepper motor output								change this back to 0x0F
 5e4:	8f e0       	ldi	r24, 0x0F	; 15
 5e6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 5e8:	18 b8       	out	0x08, r1	; 8
 5ea:	08 95       	ret

000005ec <stepper_home>:
}

void stepper_home(void)
{
	OCR1A = 3800;
 5ec:	88 ed       	ldi	r24, 0xD8	; 216
 5ee:	9e e0       	ldi	r25, 0x0E	; 14
 5f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 5f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 2400;
 5f8:	80 e6       	ldi	r24, 0x60	; 96
 5fa:	99 e0       	ldi	r25, 0x09	; 9
 5fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 600:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	for (uint16_t i =0;i < 50;i++)	//repeat as many times as recorded value
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	20 c0       	rjmp	.+64     	; 0x64a <stepper_home+0x5e>
	{
		for(stepper_index = 7; stepper_index>0 ;stepper_index--) //go cw
 60a:	87 e0       	ldi	r24, 0x07	; 7
 60c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 610:	16 c0       	rjmp	.+44     	; 0x63e <stepper_home+0x52>
		{
			PORTC = half[stepper_index];
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	e0 50       	subi	r30, 0x00	; 0
 61a:	fe 4f       	sbci	r31, 0xFE	; 254
 61c:	80 81       	ld	r24, Z
 61e:	88 b9       	out	0x08, r24	; 8
			while (tick < 5);
 620:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 624:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 628:	05 97       	sbiw	r24, 0x05	; 5
 62a:	d0 f3       	brcs	.-12     	; 0x620 <stepper_home+0x34>
			tick = 0;
 62c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 630:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	OCR1A = 3800;
	OCR1B = 2400;

	for (uint16_t i =0;i < 50;i++)	//repeat as many times as recorded value
	{
		for(stepper_index = 7; stepper_index>0 ;stepper_index--) //go cw
 634:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <stepper_index>
 638:	81 50       	subi	r24, 0x01	; 1
 63a:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 63e:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <stepper_index>
 642:	e1 11       	cpse	r30, r1
 644:	e6 cf       	rjmp	.-52     	; 0x612 <stepper_home+0x26>
void stepper_home(void)
{
	OCR1A = 3800;
	OCR1B = 2400;

	for (uint16_t i =0;i < 50;i++)	//repeat as many times as recorded value
 646:	2f 5f       	subi	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	22 33       	cpi	r18, 0x32	; 50
 64c:	31 05       	cpc	r19, r1
 64e:	e8 f2       	brcs	.-70     	; 0x60a <stepper_home+0x1e>
 650:	19 c0       	rjmp	.+50     	; 0x684 <stepper_home+0x98>
		}
	}
	
	while ((PINK & Roller) != 0)
	{
		PORTC = half[stepper_index];
 652:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <stepper_index>
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	e0 50       	subi	r30, 0x00	; 0
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	80 81       	ld	r24, Z
 662:	88 b9       	out	0x08, r24	; 8
		while (tick < 5);
 664:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 668:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 66c:	05 97       	sbiw	r24, 0x05	; 5
 66e:	d0 f3       	brcs	.-12     	; 0x664 <stepper_home+0x78>
		tick = 0;
 670:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 674:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
		++stepper_index;
 678:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <stepper_index>
 67c:	8f 5f       	subi	r24, 0xFF	; 255
		stepper_index = stepper_index % 8;
 67e:	87 70       	andi	r24, 0x07	; 7
 680:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
			while (tick < 5);
			tick = 0;
		}
	}
	
	while ((PINK & Roller) != 0)
 684:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 688:	80 fd       	sbrc	r24, 0
 68a:	e3 cf       	rjmp	.-58     	; 0x652 <stepper_home+0x66>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	1f c0       	rjmp	.+62     	; 0x6d0 <stepper_home+0xe4>
		stepper_index = stepper_index % 8;
		
	}
	for (uint16_t i =0;i < 40;i++)	//repeat as many times as recorded value
	{
		for(stepper_index = 0; stepper_index<8 ;stepper_index++)	//go CWW
 692:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <stepper_index>
 696:	16 c0       	rjmp	.+44     	; 0x6c4 <stepper_home+0xd8>
		{
			PORTC = half[stepper_index];
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	e0 50       	subi	r30, 0x00	; 0
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	80 81       	ld	r24, Z
 6a4:	88 b9       	out	0x08, r24	; 8
			while (tick < 5);
 6a6:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 6aa:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 6ae:	05 97       	sbiw	r24, 0x05	; 5
 6b0:	d0 f3       	brcs	.-12     	; 0x6a6 <stepper_home+0xba>
			tick = 0;
 6b2:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 6b6:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
		stepper_index = stepper_index % 8;
		
	}
	for (uint16_t i =0;i < 40;i++)	//repeat as many times as recorded value
	{
		for(stepper_index = 0; stepper_index<8 ;stepper_index++)	//go CWW
 6ba:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <stepper_index>
 6be:	8f 5f       	subi	r24, 0xFF	; 255
 6c0:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <stepper_index>
 6c4:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <stepper_index>
 6c8:	e8 30       	cpi	r30, 0x08	; 8
 6ca:	30 f3       	brcs	.-52     	; 0x698 <stepper_home+0xac>
		tick = 0;
		++stepper_index;
		stepper_index = stepper_index % 8;
		
	}
	for (uint16_t i =0;i < 40;i++)	//repeat as many times as recorded value
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	28 32       	cpi	r18, 0x28	; 40
 6d2:	31 05       	cpc	r19, r1
 6d4:	f0 f2       	brcs	.-68     	; 0x692 <stepper_home+0xa6>
			PORTC = half[stepper_index];
			while (tick < 5);
			tick = 0;
		}
	}
	String_out("Home position reached");
 6d6:	85 ed       	ldi	r24, 0xD5	; 213
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	22 c1       	rjmp	.+580    	; 0x920 <String_out>
 6dc:	08 95       	ret

000006de <startup>:
	
}

void startup(void)
{
	sei(); // enable interrupt
 6de:	78 94       	sei
	Init_IO();
 6e0:	79 df       	rcall	.-270    	; 0x5d4 <Init_IO>
	Timer_Init();
 6e2:	44 df       	rcall	.-376    	; 0x56c <Timer_Init>
	init_ADC();
 6e4:	da de       	rcall	.-588    	; 0x49a <init_ADC>
	Init_LCD();
 6e6:	3f dd       	rcall	.-1410   	; 0x166 <Init_LCD>
 6e8:	06 d1       	rcall	.+524    	; 0x8f6 <Init_USART>
	Init_USART();
 6ea:	80 cf       	rjmp	.-256    	; 0x5ec <stepper_home>
 6ec:	08 95       	ret

000006ee <main>:
	
	stepper_home(); // return to home position (stepper)
 6ee:	f7 df       	rcall	.-18     	; 0x6de <startup>
 6f0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <LCD_update>
{
	startup();

	while (1) /* start of super loop */
	{
		if (LCD_update == 1) /// only chars
 6f4:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <LCD_update+0x1>
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	d1 f7       	brne	.-12     	; 0x6f0 <main+0x2>
		{
			switch (rx_buffer[0])
 6fc:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx_buffer>
 700:	86 32       	cpi	r24, 0x26	; 38
 702:	49 f0       	breq	.+18     	; 0x716 <main+0x28>
 704:	8f 33       	cpi	r24, 0x3F	; 63
 706:	49 f0       	breq	.+18     	; 0x71a <main+0x2c>
 708:	83 32       	cpi	r24, 0x23	; 35
 70a:	41 f4       	brne	.+16     	; 0x71c <main+0x2e>
			{
				case '#':			//start button pressed
				String_out("Starting");
 70c:	8b ee       	ldi	r24, 0xEB	; 235
 70e:	92 e0       	ldi	r25, 0x02	; 2
				playback();
 710:	07 d1       	rcall	.+526    	; 0x920 <String_out>
				break;
				
				case '&':			//home button pressed
				stepper_home();
 712:	99 d0       	rcall	.+306    	; 0x846 <playback>
 714:	03 c0       	rjmp	.+6      	; 0x71c <main+0x2e>
				break;
 716:	6a df       	rcall	.-300    	; 0x5ec <stepper_home>
				
				case '?':			//calibrate button pressed
				record_mode();
 718:	01 c0       	rjmp	.+2      	; 0x71c <main+0x2e>
 71a:	b7 de       	rcall	.-658    	; 0x48a <record_mode>
				
				break;
			}

			memset(rx_buffer, 0, 25); // clear the array
 71c:	89 e1       	ldi	r24, 0x19	; 25
 71e:	e6 ef       	ldi	r30, 0xF6	; 246
 720:	f2 e0       	ldi	r31, 0x02	; 2
 722:	df 01       	movw	r26, r30
 724:	1d 92       	st	X+, r1
 726:	8a 95       	dec	r24
 728:	e9 f7       	brne	.-6      	; 0x724 <main+0x36>
			LCD_update = 0;
 72a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <LCD_update+0x1>
 72e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <LCD_update>
 732:	de cf       	rjmp	.-68     	; 0x6f0 <main+0x2>

00000734 <stepper_playback>:
	return;

}

void stepper_playback(int16_t stepper_value)
{
 734:	ac 01       	movw	r20, r24
	uint8_t stepper_index;
	
	if (stepper_value < 0)	//if value is negative
 736:	99 23       	and	r25, r25
 738:	f4 f0       	brlt	.+60     	; 0x776 <stepper_playback+0x42>
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	42 c0       	rjmp	.+132    	; 0x7c4 <stepper_playback+0x90>
	{
		for (uint16_t i =0;i < abs(stepper_value);i++)	//repeat as many times as recorded value
		{
			for(stepper_index = 0; stepper_index<8 ;stepper_index++)	//go CWW
			{
				PORTC = half[stepper_index];
 740:	e8 2f       	mov	r30, r24
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	e0 50       	subi	r30, 0x00	; 0
 74a:	fe 4f       	sbci	r31, 0xFE	; 254
 74c:	90 81       	ld	r25, Z
 74e:	98 b9       	out	0x08, r25	; 8
				while (tick < 5);
 750:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <tick>
 754:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <tick+0x1>
 758:	25 30       	cpi	r18, 0x05	; 5
 75a:	31 05       	cpc	r19, r1
 75c:	c8 f3       	brcs	.-14     	; 0x750 <stepper_playback+0x1c>
				tick = 0;
 75e:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 762:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	
	if (stepper_value < 0)	//if value is negative
	{
		for (uint16_t i =0;i < abs(stepper_value);i++)	//repeat as many times as recorded value
		{
			for(stepper_index = 0; stepper_index<8 ;stepper_index++)	//go CWW
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	01 c0       	rjmp	.+2      	; 0x76c <stepper_playback+0x38>
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	88 30       	cpi	r24, 0x08	; 8
 76e:	40 f3       	brcs	.-48     	; 0x740 <stepper_playback+0xc>
{
	uint8_t stepper_index;
	
	if (stepper_value < 0)	//if value is negative
	{
		for (uint16_t i =0;i < abs(stepper_value);i++)	//repeat as many times as recorded value
 770:	6f 5f       	subi	r22, 0xFF	; 255
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	02 c0       	rjmp	.+4      	; 0x77a <stepper_playback+0x46>
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	ca 01       	movw	r24, r20
 77c:	55 23       	and	r21, r21
 77e:	24 f4       	brge	.+8      	; 0x788 <stepper_playback+0x54>
 780:	88 27       	eor	r24, r24
 782:	99 27       	eor	r25, r25
 784:	84 1b       	sub	r24, r20
 786:	95 0b       	sbc	r25, r21
 788:	68 17       	cp	r22, r24
 78a:	79 07       	cpc	r23, r25
 78c:	70 f3       	brcs	.-36     	; 0x76a <stepper_playback+0x36>
 78e:	08 95       	ret
	{
		for (uint16_t i =0;i< abs(stepper_value);i++)
		{
			for(stepper_index = 7; stepper_index>0 ;stepper_index--) //go cw
			{
				PORTC = half[stepper_index];
 790:	e9 2f       	mov	r30, r25
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	ee 0f       	add	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	e0 50       	subi	r30, 0x00	; 0
 79a:	fe 4f       	sbci	r31, 0xFE	; 254
 79c:	20 81       	ld	r18, Z
 79e:	28 b9       	out	0x08, r18	; 8
				while (tick < 5);
 7a0:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <tick>
 7a4:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <tick+0x1>
 7a8:	25 30       	cpi	r18, 0x05	; 5
 7aa:	31 05       	cpc	r19, r1
 7ac:	c8 f3       	brcs	.-14     	; 0x7a0 <stepper_playback+0x6c>
				tick = 0;
 7ae:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 7b2:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	}
	else
	{
		for (uint16_t i =0;i< abs(stepper_value);i++)
		{
			for(stepper_index = 7; stepper_index>0 ;stepper_index--) //go cw
 7b6:	91 50       	subi	r25, 0x01	; 1
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <stepper_playback+0x88>
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	91 11       	cpse	r25, r1
 7be:	e8 cf       	rjmp	.-48     	; 0x790 <stepper_playback+0x5c>
			}
		}
	}
	else
	{
		for (uint16_t i =0;i< abs(stepper_value);i++)
 7c0:	6f 5f       	subi	r22, 0xFF	; 255
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	ca 01       	movw	r24, r20
 7c6:	55 23       	and	r21, r21
 7c8:	24 f4       	brge	.+8      	; 0x7d2 <stepper_playback+0x9e>
 7ca:	88 27       	eor	r24, r24
 7cc:	99 27       	eor	r25, r25
 7ce:	84 1b       	sub	r24, r20
 7d0:	95 0b       	sbc	r25, r21
 7d2:	68 17       	cp	r22, r24
 7d4:	79 07       	cpc	r23, r25
 7d6:	88 f3       	brcs	.-30     	; 0x7ba <stepper_playback+0x86>
 7d8:	08 95       	ret

000007da <slow_servo>:
		}
	}
}

void slow_servo(uint16_t servo_value)
{
 7da:	ac 01       	movw	r20, r24
	uint8_t inc_rem;	//value increment for last step
	//uint8_t initial_value;	//initial OCR value
	//uint8_t displacement;	//difference between initial and final OCR

	//calculate values for each variable
	pwm_inc = servo_value / steps;
 7dc:	9c 01       	movw	r18, r24
 7de:	a9 e8       	ldi	r26, 0x89	; 137
 7e0:	b8 e8       	ldi	r27, 0x88	; 136
 7e2:	05 d1       	rcall	.+522    	; 0x9ee <__umulhisi3>
 7e4:	fc 01       	movw	r30, r24
 7e6:	f2 95       	swap	r31
 7e8:	e2 95       	swap	r30
 7ea:	ef 70       	andi	r30, 0x0F	; 15
 7ec:	ef 27       	eor	r30, r31
 7ee:	ff 70       	andi	r31, 0x0F	; 15
 7f0:	ef 27       	eor	r30, r31
	inc_rem = servo_value % steps;
 7f2:	2e e1       	ldi	r18, 0x1E	; 30
 7f4:	2e 9f       	mul	r18, r30
 7f6:	c0 01       	movw	r24, r0
 7f8:	2f 9f       	mul	r18, r31
 7fa:	90 0d       	add	r25, r0
 7fc:	11 24       	eor	r1, r1
 7fe:	ba 01       	movw	r22, r20
 800:	68 1b       	sub	r22, r24
 802:	79 0b       	sbc	r23, r25
	pwm_buf = OCR1B;
 804:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 808:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>

	for(uint8_t i=0; i<steps; i++)	//repeat steps
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	12 c0       	rjmp	.+36     	; 0x834 <slow_servo+0x5a>
	{
		pwm_buf += pwm_inc;
 810:	2e 0f       	add	r18, r30
 812:	31 1d       	adc	r19, r1
		OCR1B = pwm_buf;	// assign to arm
 814:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 818:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		while(tick<100);	//4ms delay per step
 81c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 820:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 824:	84 36       	cpi	r24, 0x64	; 100
 826:	91 05       	cpc	r25, r1
 828:	c8 f3       	brcs	.-14     	; 0x81c <slow_servo+0x42>
		tick = 0;
 82a:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 82e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	//calculate values for each variable
	pwm_inc = servo_value / steps;
	inc_rem = servo_value % steps;
	pwm_buf = OCR1B;

	for(uint8_t i=0; i<steps; i++)	//repeat steps
 832:	4f 5f       	subi	r20, 0xFF	; 255
 834:	4e 31       	cpi	r20, 0x1E	; 30
 836:	60 f3       	brcs	.-40     	; 0x810 <slow_servo+0x36>
		OCR1B = pwm_buf;	// assign to arm
		while(tick<100);	//4ms delay per step
		tick = 0;
	}
	
	pwm_buf += inc_rem;	//increment last value
 838:	26 0f       	add	r18, r22
 83a:	31 1d       	adc	r19, r1
	OCR1B = pwm_buf;
 83c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 840:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 844:	08 95       	ret

00000846 <playback>:
#include "playback.h"



void playback(void)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	2e 97       	sbiw	r28, 0x0e	; 14
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
	int16_t motor_arr[7] = {120, 3600, 2200, 2400, -120, 3600, 3800};
 85a:	8e e0       	ldi	r24, 0x0E	; 14
 85c:	eb e5       	ldi	r30, 0x5B	; 91
 85e:	f2 e0       	ldi	r31, 0x02	; 2
 860:	de 01       	movw	r26, r28
 862:	11 96       	adiw	r26, 0x01	; 1
 864:	01 90       	ld	r0, Z+
 866:	0d 92       	st	X+, r0
 868:	8a 95       	dec	r24
 86a:	e1 f7       	brne	.-8      	; 0x864 <playback+0x1e>
	//toEEPROM[7] = {200, 3400, 2200, 2500, -200, 3500, 3800};
	//load EEPROM array into motor_arr
	//EEPROM_read_string(Address_EEPROM, toEEPROM);
	//String_out("reading from the EEPROM");
	//String_out(motor_arr);
	stepper_playback(motor_arr[0]);
 86c:	88 e7       	ldi	r24, 0x78	; 120
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	61 df       	rcall	.-318    	; 0x734 <stepper_playback>
	//slow_servo(motor_arr[1]);
	while (tick < 500);
 872:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 876:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 87a:	84 3f       	cpi	r24, 0xF4	; 244
 87c:	91 40       	sbci	r25, 0x01	; 1
 87e:	c8 f3       	brcs	.-14     	; 0x872 <playback+0x2c>
	tick = 0;
 880:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 884:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	slow_servo(motor_arr[1]);
 888:	80 e1       	ldi	r24, 0x10	; 16
 88a:	9e e0       	ldi	r25, 0x0E	; 14
 88c:	a6 df       	rcall	.-180    	; 0x7da <slow_servo>
	while (tick < 500);
 88e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 892:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 896:	84 3f       	cpi	r24, 0xF4	; 244
 898:	91 40       	sbci	r25, 0x01	; 1
 89a:	c8 f3       	brcs	.-14     	; 0x88e <playback+0x48>
	tick = 0;
 89c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 8a0:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	OCR1A = motor_arr[2];
 8a4:	88 e9       	ldi	r24, 0x98	; 152
 8a6:	98 e0       	ldi	r25, 0x08	; 8
 8a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 8ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	while (tick < 500);
 8b0:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tick>
 8b4:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tick+0x1>
 8b8:	84 3f       	cpi	r24, 0xF4	; 244
 8ba:	91 40       	sbci	r25, 0x01	; 1
 8bc:	c8 f3       	brcs	.-14     	; 0x8b0 <playback+0x6a>
	tick = 0;
 8be:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <tick+0x1>
 8c2:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tick>
	slow_servo(motor_arr[3]);
 8c6:	8f 81       	ldd	r24, Y+7	; 0x07
 8c8:	98 85       	ldd	r25, Y+8	; 0x08
 8ca:	87 df       	rcall	.-242    	; 0x7da <slow_servo>
	//OCR1B = motor_arr[3];
	stepper_playback(motor_arr[4]);
 8cc:	89 85       	ldd	r24, Y+9	; 0x09
 8ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 8d0:	31 df       	rcall	.-414    	; 0x734 <stepper_playback>
	//slow_servo(motor_arr[5]);
	slow_servo(motor_arr[5]);
 8d2:	8b 85       	ldd	r24, Y+11	; 0x0b
 8d4:	9c 85       	ldd	r25, Y+12	; 0x0c
 8d6:	81 df       	rcall	.-254    	; 0x7da <slow_servo>
 8d8:	8d 85       	ldd	r24, Y+13	; 0x0d
	OCR1A = motor_arr[6];
 8da:	9e 85       	ldd	r25, Y+14	; 0x0e
 8dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 8e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 8e4:	2e 96       	adiw	r28, 0x0e	; 14

	return;

}
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	f8 94       	cli
 8ea:	de bf       	out	0x3e, r29	; 62
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	cd bf       	out	0x3d, r28	; 61
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <Init_USART>:
 8f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		UART_out(*string);
		string++;
	}
	
	
}
 8fa:	88 e9       	ldi	r24, 0x98	; 152
 8fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 900:	86 e0       	ldi	r24, 0x06	; 6
 902:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 906:	87 e6       	ldi	r24, 0x67	; 103
 908:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 90c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 910:	08 95       	ret

00000912 <UART_out>:
 912:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 916:	95 ff       	sbrs	r25, 5
 918:	fc cf       	rjmp	.-8      	; 0x912 <UART_out>
 91a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 91e:	08 95       	ret

00000920 <String_out>:
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ec 01       	movw	r28, r24
 926:	02 c0       	rjmp	.+4      	; 0x92c <String_out+0xc>
 928:	f4 df       	rcall	.-24     	; 0x912 <UART_out>
 92a:	21 96       	adiw	r28, 0x01	; 1
 92c:	88 81       	ld	r24, Y
 92e:	81 11       	cpse	r24, r1
 930:	fb cf       	rjmp	.-10     	; 0x928 <String_out+0x8>
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <__vector_25>:

ISR(USART0_RX_vect)
{
 938:	1f 92       	push	r1
 93a:	0f 92       	push	r0
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	0f 92       	push	r0
 940:	11 24       	eor	r1, r1
 942:	0b b6       	in	r0, 0x3b	; 59
 944:	0f 92       	push	r0
 946:	2f 93       	push	r18
 948:	3f 93       	push	r19
 94a:	4f 93       	push	r20
 94c:	5f 93       	push	r21
 94e:	6f 93       	push	r22
 950:	7f 93       	push	r23
 952:	8f 93       	push	r24
 954:	9f 93       	push	r25
 956:	af 93       	push	r26
 958:	bf 93       	push	r27
 95a:	ef 93       	push	r30
 95c:	ff 93       	push	r31

		
	rx_char = UDR0;										//read UDR0
 95e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <rx_char+0x1>
 968:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <rx_char>
			
			
			
			if (rx_char == 0x0A)						//when 0A hex received
 96c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <rx_char>
 970:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <rx_char+0x1>
 974:	0a 97       	sbiw	r24, 0x0a	; 10
 976:	01 f1       	breq	.+64     	; 0x9b8 <__vector_25+0x80>
			{
				return;									//end and return func
			}	
			
				if(rx_char != 0x0D)						//carriage return?
 978:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <rx_char>
 97c:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <rx_char+0x1>
 980:	0d 97       	sbiw	r24, 0x0d	; 13
 982:	81 f0       	breq	.+32     	; 0x9a4 <__vector_25+0x6c>
				{
					rx_buffer[i] = rx_char;				//put recived char into buffer array
 984:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <i>
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <rx_char>
 98e:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <rx_char+0x1>
 992:	ea 50       	subi	r30, 0x0A	; 10
 994:	fd 4f       	sbci	r31, 0xFD	; 253
 996:	80 83       	st	Z, r24
					i++	;								//increment index
 998:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <i>
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <i>
 9a2:	0a c0       	rjmp	.+20     	; 0x9b8 <__vector_25+0x80>
				}
				else									//if carriage return
				{
					
					UART_out(0x0D);						//carriage return end of sentence
 9a4:	8d e0       	ldi	r24, 0x0D	; 13
 9a6:	b5 df       	rcall	.-150    	; 0x912 <UART_out>
					
					i=0;								// reset index
 9a8:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <i>
					LCD_update = 1;						//update LCD
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <LCD_update+0x1>
 9b4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <LCD_update>
				}
				
				
				
			
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0b be       	out	0x3b, r0	; 59
 9d4:	0f 90       	pop	r0
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	0f 90       	pop	r0
 9da:	1f 90       	pop	r1
 9dc:	18 95       	reti

000009de <__tablejump2__>:
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	88 1f       	adc	r24, r24
 9e4:	8b bf       	out	0x3b, r24	; 59
 9e6:	07 90       	elpm	r0, Z+
 9e8:	f6 91       	elpm	r31, Z
 9ea:	e0 2d       	mov	r30, r0
 9ec:	19 94       	eijmp

000009ee <__umulhisi3>:
 9ee:	a2 9f       	mul	r26, r18
 9f0:	b0 01       	movw	r22, r0
 9f2:	b3 9f       	mul	r27, r19
 9f4:	c0 01       	movw	r24, r0
 9f6:	a3 9f       	mul	r26, r19
 9f8:	70 0d       	add	r23, r0
 9fa:	81 1d       	adc	r24, r1
 9fc:	11 24       	eor	r1, r1
 9fe:	91 1d       	adc	r25, r1
 a00:	b2 9f       	mul	r27, r18
 a02:	70 0d       	add	r23, r0
 a04:	81 1d       	adc	r24, r1
 a06:	11 24       	eor	r1, r1
 a08:	91 1d       	adc	r25, r1
 a0a:	08 95       	ret

00000a0c <_exit>:
 a0c:	f8 94       	cli

00000a0e <__stop_program>:
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__stop_program>
